//
// Basic Bootstrap table
//

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max-modified($name, $breakpoints: $grid-breakpoints) {
  $max: map-get($breakpoints, $name);
  $result: if($max and $max > 0, $max - 0.02px, null);
  @return $max;
}

.table {
  --#{$variable-prefix}table-bg: #{$table-bg};
  --#{$variable-prefix}table-accent-bg: #{$table-accent-bg};
  --#{$variable-prefix}table-striped-color: #{$table-striped-color};
  --#{$variable-prefix}table-striped-bg: #{$table-striped-bg};
  --#{$variable-prefix}table-active-color: #{$table-active-color};
  --#{$variable-prefix}table-active-bg: #{$table-active-bg};
  --#{$variable-prefix}table-hover-color: #{$table-hover-color};
  --#{$variable-prefix}table-hover-bg: #{$table-hover-bg};

  width: 100%;
  margin-bottom: $spacer;
  color: $table-color;
  vertical-align: $table-cell-vertical-align;
  border-color: $table-border-color;

  // Target th & td
  // We need the child combinator to prevent styles leaking to nested tables which doesn't have a `.table` class.
  // We use the universal selectors here to simplify the selector (else we would need 6 different selectors).
  // Another advantage is that this generates less code and makes the selector less specific making it easier to override.
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $table-cell-padding-y $table-cell-padding-x;
    background-color: var(--#{$variable-prefix}table-bg);
    border-bottom-width: $table-border-width;
    box-shadow: inset 0 0 0 9999px var(--#{$variable-prefix}table-accent-bg);
  }

  > tbody {
    vertical-align: inherit;
  }

  > thead {
    vertical-align: bottom;
  }

  // Highlight border color between thead, tbody and tfoot.
  > :not(:first-child) {
    border-top: (2 * $table-border-width) solid $table-group-separator-color;
  }

  .table-responsive {
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
  }

  .responsive-row {
    display: flex;
    // flex-wrap: wrap;
  }
  
  .responsive-row .table-col-12 {
    // flex: 1 0 100%;
    flex: 0 0 auto;
    // width: 200px; /* Optional specified width */
  }

  /* Media query for responsive behavior */
  // @media (max-width: 768px) {
  //   .responsive-row td {
  //     flex-basis: 100%;
  //   }
  // }

  // @each $breakpoint in map-keys($grid-breakpoints) {
  //   $max: breakpoint-max($breakpoint, $grid-breakpoints);
  
  //   @include media-breakpoint-down($breakpoint) {
  //     .table-container {
  //       // max-width: if($max, $max, 100%);
  //       width: 100%;
  //       overflow: hidden; /* Hide any content that exceeds the container's width */
  //       .table {
  //         width: 100%; /* Make the table occupy the full width of its parent container */
  //         table-layout: fixed; /* Prevent the table from adjusting column widths automatically */
  //       }
  //     }
  //   }
  // }

  .table-container {
    max-width: 100%; /* Set the maximum width to 100% of the parent container */
    overflow: hidden; /* Hide any content that exceeds the container's width */

    .table {
      width: 100%; /* Make the table occupy the full width of its parent container */
      table-layout: fixed; /* Prevent the table from adjusting column widths automatically */
    }
  }
  
  // .outer-container .table {
  //   width: 100%; /* Make the table occupy the full width of its parent container */
  //   table-layout: fixed; /* Prevent the table from adjusting column widths automatically */
  // }
  
  // .outer-container .table td {
  //   width: 33.33%; /* Divide the table evenly into three columns */
  // }
  
  /* Media query for smaller screens */
  // @media (max-width: 768px) {
  //   .outer-container {
  //     max-width: 90%; /* Adjust the maximum width for smaller screens */
  //   }
  // }
}

.outer-table-container {
  max-width: 100%; /* Set the maximum width to 100% of the parent container */
  overflow: hidden; /* Hide any content that exceeds the container's width */

  .outer-table {
    width: 100%; /* Make the table occupy the full width of its parent container */
    table-layout: fixed; /* Prevent the table from adjusting column widths automatically */
  }
}

//
// Change placement of captions with a class
//

.caption-top {
  caption-side: top;
}


//
// Condensed table w/ half padding
//

.table-sm {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    padding: $table-cell-padding-y-sm $table-cell-padding-x-sm;
  }
}


// Border versions
//
// Add or remove borders all around the table and between all the columns.
//
// When borders are added on all sides of the cells, the corners can render odd when
// these borders do not have the same color or if they are semi-transparent.
// Therefor we add top and border bottoms to the `tr`s and left and right borders
// to the `td`s or `th`s

.table-bordered {
  > :not(caption) > * {
    border-width: $table-border-width 0;

    // stylelint-disable-next-line selector-max-universal
    > * {
      border-width: 0 $table-border-width;
    }
  }
}

.table-borderless {
  // stylelint-disable-next-line selector-max-universal
  > :not(caption) > * > * {
    border-bottom-width: 0;
  }

  > :not(:first-child) {
    border-top-width: 0;
  }
}

// Zebra-striping
//
// Default zebra-stripe styles (alternating gray and transparent backgrounds)

.table-striped {
  > tbody > tr:nth-of-type(#{$table-striped-order}) > * {
    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-striped-bg);
    color: var(--#{$variable-prefix}table-striped-color);
  }
}

// Active table
//
// The `.table-active` class can be added to highlight rows or cells

.table-active {
  --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-active-bg);
  color: var(--#{$variable-prefix}table-active-color);
}

// Hover effect
//
// Placed here since it has to come after the potential zebra striping

.table-hover {
  > tbody > tr:hover > * {
    --#{$variable-prefix}table-accent-bg: var(--#{$variable-prefix}table-hover-bg);
    color: var(--#{$variable-prefix}table-hover-color);
  }
}


// Table variants
//
// Table variants set the table cell backgrounds, border colors
// and the colors of the striped, hovered & active tables

@each $color, $value in $table-variants {
  @include table-variant($color, $value);
}

// Responsive tables
//
// Generate series of `.table-responsive-*` classes for configuring the screen
// size of where your table will overflow.

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-down($breakpoint) {
    .table-responsive#{$infix} {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }
  }
}

.table {
  .full-height {
    height: 1.8rem;
  }
  .has-arrow {
    &:after {
        width:  .5rem;
        height: .5rem;
        left: .5rem;
        // top: 48%;
        top: .75rem;
        border-color: inherit;
        -webkit-transform: rotate(-225deg) translateY(-50%);
        transform: rotate(-225deg) translateY(-50%);

      }
  }
  .mm-active>.has-arrow:after {
    -webkit-transform: rotate(-135deg) translateY(-50%);
    transform: rotate(-135deg) translateY(-50%);
  }
}